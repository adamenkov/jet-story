This is becoming unmanageable.  I want to try z80dismblr-win.exe instead.  So I saved memory at 5B00-FFFF and process it with

z80dismblr-win.exe --addbytes --uppercase --bin 0 ROM.bin --bin 0x5B00 Jet-Story_5B00-FFFF.bin --codelabel 0x6EB4 --out Jet-Story.asm

Screen memory layout:

http://www.breakintoprogram.co.uk/computers/zx-spectrum/screen-memory-layout

ZX Spectrum memory

*	0000-3FFF	ROM
OK	22AA		Based on (x, y) in BC (y in B, x in C; y grows downwards), calculate address in screen memory (HL) and pixel position in the byte (C mod 8)
OK	22B1		See 22AA above.
*	4000-57FF	screen pixels (3 parts x 8 rows x32 columns x 8 pixels)
*	5800-5AFF	attributes
*	5DC0-6DBF	Initial map (128 x 8 x (y, x, 0, type)) of all game objects


*	6DD3-6DE1	Strange adjustment of HL after each pixel line of running line shift 1 pixel to the left
*	6DE2-6DE8	Z=1 iff no key is pressed.
*	6DE9-6DEE	Wait until key is pressed.
*	6DEF-6E07	Clear the screen and border.
*	6EB4		Main menu?
OK	6F4B-6F63	Shift the running line one pixel to the left.
*	6F64-7139	Text of running line and the trailing '$'.
*	713A-71C0	Spaces (' ')
*	71C1-71E7	The code that outputs the running line.
*	71E8-		String line to print a character, to call DECC (E18B) - character 2 sets row (17h) and column (1F), ?, ?, character to print (71ED)
*	71ED		The (invisible) symbol at the bottom right-hand corner - for the running line.
*	7213		Initialize game
OK	8F00-9EFF	32 (actually, 29) 32x32 labyrinth elements' pixels
OK	9F00-A0FF	attributes for the above
*	A100-A2FF	8 x 2 tables used to convert sprite byte to a pair of actual screen bytes based on sprite x (mod 8) coordinate
*	A4FF, A6FF, A8FF, A9FF, AAFF, ACFF, AEFF - bytes correspoding to 1, 2, 3, 4, 5, 6 pixel columns of bar (fuel, ammo, shield)
OK	B100-...	16 x 16 sprites (no attributes)

*	C400-D3FF	Session-dependent (current) map (16 x 8 x (y, x, 0, type)) of all game objects

OK	D400-DEA7	Labyrinth (encoded;  in byte b7b6b5b4b3b2b1b0, (b4b3b2b1b0 - 1) or 0 is the number of labyrinth block, b7b6b5 is the number it is repeated)
*	DEA8-DEAA	Go to DF1B (Render all blocks of current room: extract (decompress) 28h blocks of current room into DEF3-DF1A, rendering.)
*	DEAB		Go to DF74 (Return (in HL) target address of the next pixel line of HUD).
>>>	DEB4-DEB5	Go to E027 (Draw a sprite???)
*	DECC-DECE	Go to E18B (draw a string with special characters)
*	DEF0-DEF1	Destination address in screen memory to print a character
*	DEF2		Attribute (What follows symbol 1 in a given string to print (in DEF2)).
OK	DEF3-DF1A	Blocks of current room (28h pieces).
*	DF1B-DF48	Render all blocks of current room: extract (decompress) 28h blocks of current room into DEF3-DF1A, rendering.
*	DF49		Render a room
OK	DF74-DF82	Return (in HL) target address of the (after HL) pixel byte below the current one.
OK	DF83-DFEB	Copy block (128 bytes of pixels + 16 bytes of attributes) from block definition (block number in A) to the video memory (at the right spot, pointed to by HL).
*	DFEC-DFF5	For each of the five maze block rows, get the screen address of the first block top left corner.

OK	E011-E026	Put the address of sprite number A in DE, address of screen memory where to draw it (B = y, C = x) in HL, pixel offset (a2a1a0) in B as 1010_a2_a1_a0_1 in B (see A100)
>>>	E027-E0A1	Draw a sprite???
>>>	E0BE-E0DC	???
OK	E0DD-E0E8	Give address (in DE) of graphics for character in A.
OK	E139-E147	Calculate screen memory address (HL) based on row (0 <= H <= 17h) and column (0 <= L <= 1F).
OK	E152-E16E	Actually draw character (in A) on screen, given its destination in screen memory (in HL).  E15B is either NOP or XOR (HL) (opcode AE).
OK	E18B-E1B7	Print text.  Symbol 2 sets cursor at (row, column).  Symbol 1 sets attribute (puts the next symbol in (DEF2))
OK	E1B8-E1E9	get key (Z=1 iff pressed). D = 5-group query mask, E = pressed key mask, B = group element counter, C = 5-key group counter
OK	E1EA-E211	key table.  (element at 8 * key_number_1_to_5 + group_number_1_to_8 gives the pressed key)
OK	E212-E21E	Wait for pressed key and play the sound "key assigned".
*	E21F-E243	Actually play the sound "key assigned".
*	E244-E24E	Play the sound "key assigned".
*	E358-E3C6	Guess: Update functions for Objects.
*	E35B-E35D	Go to E4D0 (generate a random byte in A).
*	E364-E366	Go to E4FC. (Update enemies animation frames.)
*	E370-E372	Go to E5ED. (Every 4th frame, update object's horizontal position based on horizontal acceleration.)
	E379-E37B	Go to E60A. (Update enemy's vertical position based on vertical acceleration.)
*	E37C-E37E	Go to E696. (Update enemy's horizontal position.)
>>>	E37F-E381	Go to E61C.	(Update enemy's vertical position.)
*	E38B-E38D	Go to E7CC
*	E397-E399	Go to E859
*	E3A6-		Render explosion particles.
*	E3AC-		Handle a temporary object (e.g. player bullet)?
*	E3AF-		???
*	E3B2-E3B4	Go to ECBO (draw a bar of remaining quantity A, HL - destination screen memory address).
*	E3B5-E3B7	Go to ECF5
*	E3C4-		???
*	E3C7		Frame number (modulo 256) - to be used in animation frame selection?
*	E3CB		Type of player bombs (1 - missiles, 2 - bombs, 3 - stars, 4 - balls)
*	E3CC		Quantity of player bombs
*	E3CE		Amount of ammo (0-255)
*	E3CF		Fuel remaining
*	E3D1		Number of enemies remaining in the room?
*	E3D6		Objects of current room, starting with the player???  Or just the player?
*	E3D7		Y-coordinate of the player, in pixels, starting from the top of the screen
*	E3D8		X-coordinate of the player, in pixels, starting from the left edge of the screen
*	E3DE		New room?
*	E3E8-E3F7	data for right (16x16) half of the player object?
*	E404-E425	34 bytes of ???
*	E437-E496	96 bytes of ???
*	E497		current room (1 byte)
*	E4D0-E4DE	Generate a random byte in A?
*	E4FC-		Update enemies animation frames.
*	E501-E51B	Clear E3F8, E400, E3F5, E3FD, E3F9, E401, E402, E403.
OK	E51C-E537	Change current room, if necessary.
*	E538-E548	Render blocks of current room, clearing screen first, if necessary.
*	E549-E556	Clear screen, including the attributes (zero out using LDIR).
OK	E557-E59F	OR paper attributes at the object location (all 16x16 blocks).
*	E5AE-E5BE	Add (IX+0C) ??? to A (horizontal speed), store A mod 16 back to (IX+0C). WHY????
*	E5BF-
*	E5CA-E5EC	Update horizontal/vertical speed (in A) based on horizontal/vertical velocity (in E) but keep |A| within 60.
*	E5ED-E5FF	Every 4th frame, update object's horizontal position based on horizontal acceleration.
*	E600-E609	Every 4th frame, do what's below (update vertical position, adding gravity).
*	E60A-E61B	Update (player's) vertical position, adding gravity.
*	E61C-		Update enemy's vertical position.
*	E696-E70B	Update collisions?
OK	E730-E73B	Carry = (enemy touched screen top, bottom, or right).
OK	E73C-E75D	Put in HL the address of top left attribute square, based on x (in C) and y (in B), in IX y and x mod 8 (i.e. inside the 8x8 block), make DE = 20.
OK	E762-E781	OR paper attributes at the object location (4-9 8x8 blocks).
*	E79C-E7AD	OR attributes (2 or 3 bytes, depending on whether x is divisible by 8).
*	E7BA-E7C0	Load B with y (IX+1), load C with x (IX+2).
*	E7C1-E7C7	Store B as y (IX+1), store C as x (IX+2).
*	E7C8-E7F4	Update the coordinates (????) and draw a sprite?
*	E7CC-E7F4	Update the coordinates (????) and draw a sprite, without resetting the animation frame?
*	E825-E83E	Render the player?
*	E83F-E858	Render the player, without resetting the animation frame?
*	E859-E899	Update music and read keyboard, also process player's bombs
*	E90B-E93B	Animate (?) and render player jets.
*	E970-		Key "4. Start game" was press, wait for a keypress and start the game.
*	E9AF-E9B9	Zero 96 bytes at E437-E496.
*	E9BA-E9D5	Zero 34 bytes at E404-E425, then ???
*	EADC-EB51	Play 48k main music.
*	EC8B-ECAF	Print a number in A (2 digits in BCD format).
*	ECBO-ECF4	Draw a bar of remaining quantity A, HL - destination screen memory address
*	ECF5-ED11	Probably some delays - everything is so quick if disabled (wrong: Render all objects (on screen))
*	EE4B		Go to FC76 (Enemy-player collisions, update HUD color squares)
*	EE51		Go to FB91 (Draw stats and objects, save current room enemies (?), go the glitch at room (3, 8)?)
*	EE58-EECF	6 game objects of the current room (6 x 20 bytes)
*	EED0		Shield remaining
*	EED1-F008(?)table of 8 bytes (of something) for each type (0-38)

*	F023-F028	Some initialization before the session?
*	F029-F04C	Render objects, update squares of HUD, update object location?, probably set a flag (or A) to indicate that some enemies are still remaining.
*	F04D-F0AC	Sync room and its enemies - prepare current room (copy objects from the map (C400) and draw HUD)
*	F0B8-F0C4	Given object type (IX), multiply it by 8 and add EED1 to return a pointer to some 8-byte structure in HL (which we later save in E3C9)
*	F0C5-F0CE	Get update function address for the given object type and call it.  Does not include projectiles.
*	F0CF-F0FC	Multiple purpose: render current objects and update objects?
*	F0FF-F14B(?)Virtual table of update (?) functions for each object type
>>>	F163-		The join point (?) for object update functions.
*	F22D-F239	Generate a number in A, 0 <= A <= 3F (63) or (128 <= A <= 128 + 63)
*	F241-F247	Generate a number in A, 0 <= A <= 3F (63) or (128 <= A <= 128 + 63), and put it in (IX+11)

*	F25C-F26B	Set desired vertical acceleration(?), depending on the relative Y-coordinate of the player.
*	F26C-F27D	Set desired horizontal acceleration(?), depending on the relative X-coordinate of the player.
*	F29F-		Update the flying pyramids (object 18 = 12h)
>>>	F53D-F552	Update the Big Z (object 14 = 0E)
*	F553-F562	Update the animation frame for the flying pyramid (or maybe any four-frame object with alternating jet?)
*	F563-F571	Set the correct image of the Big Z - looking left or right, depending on where the player is.
*	F719-		Collision of player bullets with enemies.
*	F873-F875	Score (in BCD format)
*	F876		Number of bases left (in BCD for, starting from 47)
*	F889		Current room number again (like in E497)
*	F9B9-F9BC	"Notes" to play when the room is empty.
*	F9BD		???

***	F9FB-FA2C	MAIN GAME (SESSION) LOOP

*	FA2D-		Out of shield!
*	FA86-FAD4	Play music when current room is empty
*	FAD5-FB47	Draw squares in HUD (first four character lines), then draw stats.
*	FA86-FAD4	???
*	FB44		Print current scores
*	FB48-		???
*	FB56-FB59	Characters for player bombs on HUD ('a'/61h - missiles, 'c'/63h - bombs, 'f'/6F - stars, 'l'/6C - balls)
*	FB5A-FB90	Text of stats: "FUEL     AMMO     SHIELD  >    <    ^^ (2 bases)" (FB89,FB8A - player bomb characters))
*	FB91-FC14	Draw stats and objects, save current room enemies (?), go the glitch at room (3, 8)?
*	FC76-		Enemy-player collisions, update HUD color squares
*	FDCA-		Update timers?  (Without it, cannons don't shoot)  Or enemy-specific code?
*	FECA-		All bases destroyed (mission accomplished)



Game object (IX)
Each game object occupies 20 bytes of memory.  There are up to 6 16x16 objects in each room.
*	IX	object type (0 - killed?, 64 - the player?)
*	IX+1	old y coordinate (vertical coordinate in pixels from the top of the screen) ... of 16x16 part of the object?
*	IX+2	old x coordinate (vertical coordinate in pixels from the left of the screen) ... of 16x16 part of the object?
*	IX+3	sprite number (in the catalog of all 16x16 sprites) / (animation frame ???)
*	IX+4	new y coordinate
*	IX+5	new x coordinate
*	IX+6	new sprite number (in the catalog of all 16x16 sprites ???) / animation frame
*	IX+7	
*	IX+9	vertical speed
*	IX+0A	
*	IX+0B	horizontal speed
*	IX+0C	?
*	IX+0D	desired vertical acceleration
*	IX+0E	desired horizontal acceleration
*	IX+11	A fluctuation of velocity/acceleration? e.g. a number A, 0 <= A <= 3F (63) or (128 <= A <= 128 + 63)

Render order:
1. Maze and player
2. HUD
3. Enemies and objects

Enemies:
12:	Flying pyramid. Frames 38-41 (move left with/without jet, move right with/without jet).